<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.didichuxing.datachannel.arius.admin.persistence.mysql.app.AppTemplateAuthDAO">
    <resultMap id="BaseResultMap" type="com.didichuxing.datachannel.arius.admin.common.bean.po.app.AppTemplateAuthPO">
        <result column="id" jdbcType="BIGINT" property="id"/>
        <result column="appid" jdbcType="INTEGER" property="appId"/>
        <result column="template" jdbcType="VARCHAR" property="templateId"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="responsible_ids" jdbcType="VARCHAR" property="responsible"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>

    <sql id="Base_Column_List">
       id, appid, template, `type`, responsible_ids, create_time, update_time
    </sql>

    <insert id="insert" parameterType="com.didichuxing.datachannel.arius.admin.common.bean.po.app.AppTemplateAuthPO"
            useGeneratedKeys="true"
            keyColumn="id" keyProperty="id">
        insert into appid_template_info (appid, template, `type`, responsible_ids)
        values (#{appId}, #{templateId}, #{type}, #{responsible})
    </insert>

    <update id="update" parameterType="com.didichuxing.datachannel.arius.admin.common.bean.po.app.AppTemplateAuthPO">
        update appid_template_info
        <trim prefix="set" prefixOverrides=",">
            <if test="type != null">,`type` = #{type}</if>
            <if test="responsible != null">,responsible_ids = #{responsible}</if>
        </trim>
        where id = #{id}
    </update>

    <select id="listByCondition"
            parameterType="com.didichuxing.datachannel.arius.admin.common.bean.po.app.AppTemplateAuthPO"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from appid_template_info
        <trim prefix="where" prefixOverrides="and">
            <if test="id != null">and id = #{id}</if>
            <if test="appId != null">and appid = #{appId}</if>
            <if test="templateId != null">and template = #{templateId}</if>
            <if test="type != null">and `type` &lt;= #{type}</if>
            <if test="responsible != null">
                and (responsible_ids = #{responsible}
                or responsible_ids like concat(#{responsible},',%')
                or responsible_ids like concat('%,', #{responsible})
                or responsible_ids like concat('%,', #{responsible},',%'))
            </if>
        </trim>
        order by id desc
    </select>

    <delete id="delete" parameterType="long">
        update appid_template_info
        set status = 0
        where id = #{authId}
    </delete>

    <select id="listWithRwAuthsByAppId" parameterType="int" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from appid_template_info
        where appid = #{appId} and (`type` = 2 or `type` = 3) and status = 1
    </select>

    <select id="getByAppIdAndTemplateId" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from appid_template_info
        where appid = #{appId} and template = #{templateId} and (`type` = 2 or `type` = 3) and status = 1
    </select>

    <select id="getByAppIdAndTemplateIdAndType" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from appid_template_info
        where appid = #{appId} and template = #{templateId} and `type` = #{type} and status = 1
    </select>

    <select id="listByLogicTemplateId" parameterType="string" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from appid_template_info
        where template = #{templateId} and (`type` = 2 or `type` = 3) and status = 1
    </select>

    <select id="getById" parameterType="long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from appid_template_info
        where id = #{authId}
    </select>

    <select id="listWithRwAuths" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from appid_template_info
        where (`type` = 2 or `type` = 3) and status = 1
    </select>


    <select id="listWithOwnerAuths" parameterType="long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from appid_template_info
        where `type` = 1 and status = 1
    </select>


</mapper>